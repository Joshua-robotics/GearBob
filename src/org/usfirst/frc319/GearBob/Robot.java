// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.GearBob;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc319.GearBob.commands.*;
import org.usfirst.frc319.GearBob.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    public static driveTrain driveTrain;
    public static GearCollector gearCollector;
    public static Logger logger; // initial attempt at creating log file
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        driveTrain = new driveTrain();
        gearCollector = new GearCollector();
        
        logger = Logger.getInstance();

       oi = new OI();

     
        autonomousCommand = new AutonomousCommand();

     }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	Robot.logger.close(); // initial attempt at creating log

    }	
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        
        
    }

    public void autonomousInit() {
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        Robot.logger.openFile(); // initial attempt at creating log file
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        /////////////////////drivetrain//////////////////////////////////////////////
        SmartDashboard.putNumber("leftleadcurrent", Robot.driveTrain.getLeftLeadCurrent());
        SmartDashboard.putNumber("left1current", Robot.driveTrain.getLeft1Current());
        SmartDashboard.putNumber("left2current", Robot.driveTrain.getLeft2Current());
        SmartDashboard.putNumber("left3current", Robot.driveTrain.getLeft3Current());
        SmartDashboard.putNumber("rightleadcurrent", Robot.driveTrain.getRightLeadCurrent());
        SmartDashboard.putNumber("right5current", Robot.driveTrain.getRight5Current());
        SmartDashboard.putNumber("right6current", Robot.driveTrain.getRight6Current());
        SmartDashboard.putNumber("right7current", Robot.driveTrain.getRight7Current());
       
        SmartDashboard.putNumber("leftLeadVoltage", Robot.driveTrain.getLeftLeadVoltage());
        SmartDashboard.putNumber("left1Voltage", Robot.driveTrain.getLeft1Voltage());   
        SmartDashboard.putNumber("left2Voltage", Robot.driveTrain.getLeft2Voltage());
        SmartDashboard.putNumber("left3Voltage", Robot.driveTrain.getLeft3Voltage());
        SmartDashboard.putNumber("rightLeadVoltage", Robot.driveTrain.getRightLeadVoltage());
        SmartDashboard.putNumber("right5Voltage", Robot.driveTrain.getRight5Voltage());
        SmartDashboard.putNumber("right6Voltage", Robot.driveTrain.getRight6Voltage());
        SmartDashboard.putNumber("right7Voltage", Robot.driveTrain.getRight7Voltage());
        
        SmartDashboard.putNumber("pdp0", Robot.driveTrain.getpdp0Current());
        SmartDashboard.putNumber("pdp1", Robot.driveTrain.getpdp1Current());
        SmartDashboard.putNumber("pdp2", Robot.driveTrain.getpdp2Current());
        SmartDashboard.putNumber("pdp3", Robot.driveTrain.getpdp3Current());
        SmartDashboard.putNumber("pdp12", Robot.driveTrain.getpdp12Current());
        SmartDashboard.putNumber("pdp13", Robot.driveTrain.getpdp13Current());
        SmartDashboard.putNumber("pdp14", Robot.driveTrain.getpdp14Current());
        SmartDashboard.putNumber("pdp15", Robot.driveTrain.getpdp15Current());
        
        SmartDashboard.putNumber("leftStickY", Robot.oi.driverController.getLeftStickY());
        SmartDashboard.putNumber("rightStickX", Robot.oi.driverController.getRightStickX());
        
        Robot.logger.logAll(); // initial attempt at creating log
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
