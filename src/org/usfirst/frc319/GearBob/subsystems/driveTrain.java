// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.GearBob.subsystems;

import org.usfirst.frc319.GearBob.RobotMap;
import org.usfirst.frc319.GearBob.commands.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class driveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftLead = RobotMap.drivetrainleftLead;
    private final CANTalon left1 = RobotMap.drivetrainleft1;
    private final CANTalon left2 = RobotMap.drivetrainleft2;
    private final CANTalon left3 = RobotMap.drivetrainleft3;
    private final CANTalon rightLead = RobotMap.drivetrainrightLead;
    private final CANTalon right5 = RobotMap.drivetrainright5;
    private final CANTalon right6 = RobotMap.drivetrainright6;
    private final CANTalon right7 = RobotMap.drivetrainright7;
    private final RobotDrive joystickDrive = RobotMap.drivetrainJoystickDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public driveTrain(){
    	
    	leftLead.changeControlMode(TalonControlMode.Voltage);
    	left1.changeControlMode(TalonControlMode.Follower);
    	left2.changeControlMode(TalonControlMode.Follower);
    	left3.changeControlMode(TalonControlMode.Follower);
    	leftLead.reverseSensor(true);
    	leftLead.reverseOutput(true);
    	leftLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	leftLead.configEncoderCodesPerRev(1024);
    	
    	rightLead.changeControlMode(TalonControlMode.Voltage);
    	right5.changeControlMode(TalonControlMode.Follower);
    	right6.changeControlMode(TalonControlMode.Follower);
    	right7.changeControlMode(TalonControlMode.Follower);
    	rightLead.reverseOutput(false);
    	rightLead.reverseOutput(false);
    	rightLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	rightLead.configEncoderCodesPerRev(1024);
    	
    	leftLead.configNominalOutputVoltage(forwardVoltage, reverseVoltage);
    	leftLead.configPeakOutputVoltage(forwardVoltage, reverseVoltage);

    	rightLead.configNominalOutputVoltage(forwardVoltage, reverseVoltage);
    	rightLead.configPeakOutputVoltage(forwardVoltage, reverseVoltage);
    	
    	double pDrive = 0.00;
    	double fGain = 0.00;
    	double dDrive = 0.00; 
    	double closedLoopRampRate = 0.00;
    	
    	rightLead.setPID(pDrive, 0, dDrive, 0, closedLoopRampRate, DRIVE_TRAIN_PROFILE);
    	leftLead.setPID(pDrive, 0, dDrive, 0, closedLoopRampRate, DRIVE_TRAIN_PROFILE);
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    
    	setDefaultCommand(new JoystickDrive());
    
    }
    
    public void joystickDrive(double moveValue, double rotateValue) {
		joystickDrive.arcadeDrive(moveValue, rotateValue, true);
	}
    
}

