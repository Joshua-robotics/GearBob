// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.GearBob.subsystems;

import org.usfirst.frc319.GearBob.Robot;
import org.usfirst.frc319.GearBob.RobotMap;
import org.usfirst.frc319.GearBob.commands.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 * 
 */
public class driveTrain extends Subsystem {

    private final CANTalon leftLead = RobotMap.drivetrainleftLead;
    private final CANTalon left1 = RobotMap.drivetrainleft1;
    private final CANTalon left2 = RobotMap.drivetrainleft2;
    private final CANTalon left3 = RobotMap.drivetrainleft3;
    private final CANTalon rightLead = RobotMap.drivetrainrightLead;
    private final CANTalon right5 = RobotMap.drivetrainright5;
    private final CANTalon right6 = RobotMap.drivetrainright6;
    private final CANTalon right7 = RobotMap.drivetrainright7;
    
    private final RobotDrive joystickDrive = RobotMap.driveTrainJoystickDrive;
    
    private final PowerDistributionPanel pdp = RobotMap.pdp;
   
    public final int DRIVE_PROFILE = 0;
    
    public driveTrain(){
    	
    	leftLead.changeControlMode(TalonControlMode.Voltage);
    	left1.changeControlMode(TalonControlMode.Follower);
    	left2.changeControlMode(TalonControlMode.Follower);
    	left3.changeControlMode(TalonControlMode.Follower);
    	leftLead.reverseSensor(true);
    	leftLead.reverseOutput(true);
    	leftLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	leftLead.configEncoderCodesPerRev(1024);
    	
    	rightLead.changeControlMode(TalonControlMode.Voltage);
    	right5.changeControlMode(TalonControlMode.Follower);
    	right6.changeControlMode(TalonControlMode.Follower);
    	right7.changeControlMode(TalonControlMode.Follower);
    	rightLead.reverseOutput(false);
    	rightLead.reverseOutput(false);
    	rightLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	rightLead.configEncoderCodesPerRev(1024);
    	
    	leftLead.configNominalOutputVoltage(+12.0, -12.0);
    	leftLead.configPeakOutputVoltage(+12.0, -12.0);

    	rightLead.configNominalOutputVoltage(+12.0, -12.0);
    	rightLead.configPeakOutputVoltage(+12.0, -12.0);

    	double pDrive = 0.00;
    	double fGain = 0.00;
    	double dDrive = 0.00; 
    	double closedLoopRampRate = 0.00;
    	
    	rightLead.setPID(pDrive, 0, dDrive, fGain, 0, closedLoopRampRate, DRIVE_PROFILE);
    	leftLead.setPID(pDrive, 0, dDrive, fGain, 0, closedLoopRampRate, DRIVE_PROFILE);
    	
    	rightLead.EnableCurrentLimit(true);//Enables current limit...
    	rightLead.setCurrentLimit(50);//do not exceed this amount of current...need to figure out actual number/this was a guess (in amps) Joshua 6/3/17
    	
    	leftLead.EnableCurrentLimit(true);
    	leftLead.setCurrentLimit(50);
    }

   
    public void initDefaultCommand() {
    
    	setDefaultCommand(new JoystickDrive());
    
    }
    
    public void joystickDrive(double moveValue, double rotateValue) {
		joystickDrive.arcadeDrive(moveValue, rotateValue, true);
	}
    public double getLeftLeadCurrent (){
    return Robot.driveTrain.leftLead.getOutputCurrent();
    }
    public double getLeft1Current (){
        return Robot.driveTrain.left1.getOutputCurrent();
    }
    public double getLeft2Current (){
        return Robot.driveTrain.left2.getOutputCurrent();
    }
    public double getLeft3Current (){
       return Robot.driveTrain.left3.getOutputCurrent();
    }
    public double getRightLeadCurrent (){
       return Robot.driveTrain.rightLead.getOutputCurrent();
    }
    public double getRight5Current (){
       return Robot.driveTrain.right5.getOutputCurrent();
    }
    public double getRight6Current (){
       return Robot.driveTrain.right6.getOutputCurrent();
    }
    public double getRight7Current (){
       return Robot.driveTrain.right7.getOutputCurrent();
    }
    
    public double getLeftLeadVoltage (){
        return Robot.driveTrain.leftLead.getOutputVoltage();
    }
    public double getLeft1Voltage (){
        return Robot.driveTrain.left1.getOutputVoltage();
    }
    public double getLeft2Voltage (){
        return Robot.driveTrain.left2.getOutputVoltage();
    }
    public double getLeft3Voltage (){
       return Robot.driveTrain.left3.getOutputVoltage();
    }
    public double getRightLeadVoltage (){
       return Robot.driveTrain.rightLead.getOutputVoltage();
    }
    public double getRight5Voltage (){
       return Robot.driveTrain.right5.getOutputVoltage();
    }
    public double getRight6Voltage (){
       return Robot.driveTrain.right6.getOutputVoltage();
    }
    public double getRight7Voltage (){
       return Robot.driveTrain.right7.getOutputVoltage();
    }
    
    public double getpdp0Current(){
    	return pdp.getCurrent(0);
    }
    public double getpdp1Current(){
    	return pdp.getCurrent(1);
    }
    public double getpdp2Current(){
    	return pdp.getCurrent(2);
    }
    public double getpdp3Current(){
    	return pdp.getCurrent(3);
    }
    public double getpdp12Current(){
    	return pdp.getCurrent(12);
    }
    public double getpdp13Current(){
    	return pdp.getCurrent(13);
    }
    public double getpdp14Current(){
    	return pdp.getCurrent(14);
    }
    public double getpdp15Current(){
    	return pdp.getCurrent(15);
    }
	public double getRightDriveVelocity() {
		return rightLead.getSpeed();
	}

	public double getLeftDriveVelocity() {
		return leftLead.getSpeed();
	}
}

